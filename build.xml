<!--===========================================================================
  This is the build file for the Pentaho Agile BI Project
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See subfloor.xml for more details
============================================================================-->
<project name="Agile BI" basedir="." default="dist" 
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Agile BI project
		and works with the subfloor.xml file.
	</description>

	<!-- Import the common_build.xml file which contains all the default tasks -->	
	<import file="build-res/subfloor-pkg.xml"/>

  <property name="platform.dist.dir"
	            value="."
	            description="Location of platform assembly zip" />

	<property name="report-designer-assembly.dir"
		            value="."
		            description="Location of report designer assembly zip" />

	<property name="monetdb-plugin-assembly.dir"
		            value="../monetdb-bulk-loader/dist"
		            description="Location of MonetDB assembly zip" />

	<property name="insta-plugin-assembly.dir"
		            value="../pentaho-insta-tmp/dist"
		            description="Location of insta wizard assembly zip" />

	<property name="platform.unzip.dir"
	            value="${bin.dir}/platform-unzip"
	            description="Location of platform assembly zip" />
	
	<property name="report-designer.unzip.dir"
				value="${bin.dir}/report-designer-unzip"
				description="Location of expanded report designer assembly zip" />
		
	<property name="insta.unzip.dir"
				value="${bin.dir}/insta-unzip"
				description="Location of expanded report designer assembly zip" />
	
	<property name="kettle.dist.dir"
				value="../kettle"
    			description="Location of kettle spoon zip" />
	
	<property name="analyzer.dist.dir"
				value="."
				description="Location of Analyzer Agile BI plugin" />
	
    <property name="geo.dist.dir"
                value="."
                description="Location of the Geo Agile BI plugin" />
    
	<property name="pdiwithagilebi"
				value="pdi-ce-agile-bi" 
				description="Name of the pdi distribution with agile bi"/>
	
  <property name="server.assembly.filename" value="server-assembly.properties" />

  <target name="resolve"
	          depends="resolve-default, resolve-test, ivy.check-releasable"
	          description="Retrieves all the dependent libraries" />

	<target name="dist-noresolve" depends="jar,package" description="Builds and packages the application" />
	<target name="dist" depends="resolve,jar,package" description="Builds and packages the application" />
	
	<target name="clean-dist">
		<delete dir="${dist.dir}" />
		<delete dir="${stage.dir}" />
		<delete dir="${platform.unzip.dir}" />
		<delete dir="${report-designer.unzip.dir}" />
	</target>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN subfloor.xml.
    --> 
	
	  <target name="cobertura-no-install"
	          description="Runs tests in an instrumented environment and produces Cobertura test coverage reports"
	          depends="clean-cobertura,compile,compile-tests,cobertura.instrument-classes,cobertura.test-instrumented,cobertura.xml-report,cobertura.html-report" />
	
	
  <target name="assemble.init">
    <mkdir dir="${stage.dir}" />
  </target>
	
	  <target name="assemble-report-wizard">
	  	<!-- Step 1: Unzip a PRD zip into staging dir -->
	  			<mkdir dir="${report-designer.unzip.dir}"/>
	  			<unzip dest="${report-designer.unzip.dir}">
	  				<fileset dir="${report-designer-assembly.dir}">
	  				        <include name="prd-ce-*.zip"/>
	  			    </fileset>
	  			</unzip>
	  	
	  	<!-- Step 2: Copy wizard templates into agile-bi plugin -->
	    <copy todir="${approot.stage.dir}/templates" overwrite="true">
	      <fileset dir="${report-designer.unzip.dir}/report-designer/templates"/>
	    </copy>
	  </target>

	  <target name="assemble-insta">
	  	<!-- Step 1: Unzip an insta zip into staging dir -->
	  			<mkdir dir="${insta.unzip.dir}"/>
	  			<unzip dest="${insta.unzip.dir}">
	  				<fileset dir="${insta-plugin-assembly.dir}">
	  				        <include name="instanal-*.zip"/>
	  			    </fileset>
	  			</unzip>
	  	
	  	<!-- Step 2: Copy wizard templates into agile-bi plugin -->
	    <copy todir="${approot.stage.dir}/platform/pentaho-solutions/system" overwrite="true">
	      <fileset dir="${insta.unzip.dir}"/>
	    </copy>
	  </target>

  <!--   
  <target name="assemble" depends="assemble.init,assemble.copy-libs,assemble-embedded-server,assemble-report-wizard">
  -->	
	  <target name="assemble" depends="assemble.init,assemble.copy-libs,assemble-embedded-server,assemble-report-wizard">
    <copy todir="${approot.stage.dir}" overwrite="true">
      <fileset dir="${package.resdir}" />
    </copy>
  	<delete>
		<fileset dir="${approot.stage.dir}/lib">
			
			<!-- first remove duplicate jars -->
			<include name="pentaho-metadata-*.jar"/>
			
			<!-- swt jars -->
			<include name="x86-*.jar"/>
			<include name="runtime-*.jar"/>
			<include name="common-*.jar"/>
			<include name="jface-*.jar"/>
			<include name="commands-*.jar"/>

            <include name="swt*.jar"/>

			<!-- servlet api -->
			<!--include name="servlet-api-*.jar"/-->
			<!-- xul jars -->
			<include name="pentaho-xul-*.jar"/>
			<!-- kettle jars -->
			<include name="kettle-*.jar"/>
			<!-- jetty jars -->
			<include name="jetty-*.jar"/>
			<!-- jettison jars -->
			<include name="jettison-*.jar"/>
			<!-- reporting libcore and libformula -->
			<!-- spring core -->
  			<include name="spring-core*.jar"/>
  			<!-- spring ldap -->
  			<include name="spring-ldap-*.jar"/>
  			<!-- spring web -->
  			<include name="spring-web-*.jar"/>
  			<!-- spring mock -->
  			<include name="spring-mock-*.jar"/>
			<!-- mondrian -->
			<include name="mondrian-*.jar"/>
			<include name="eigenbase-*.jar"/>
			<include name="commons-math-*.jar"/>
			<include name="javacup-*.jar"/>
			<include name="olap4j-*.jar"/>
			<!-- kettle -->
			<include name="xmlbeans-*.jar"/>		
			
			<include name="gwt-dev-*.jar"/>
			<include name="gwt-user-*.jar"/>
			<include name="slf4j-*.jar"/>

			<!-- batik -->
			<include name="batik-*.jar"/>
			<!-- Jaxb -->
			<include name="jaxb-api*.jar"/>
			<include name="jaxb-impl*.jar"/>
			<!-- jackrabbit -->
  			<include name="jackrabbit-*"/>
			<!-- jasperreports -->
  			<include name="jasperreports-*.jar"/>
			<!-- chartbeans -->
  			<include name="pentaho-chartbeans-*.jar"/>	

      <!-- hibernate -->
      <include name="hibernate-*.jar"/>
      <exclude name="hibernate-ehcache*.jar"/>

			<!-- castor -->
  			<include name="castor-*.jar"/>
			<!-- derby -->
  			<include name="derby-*.jar"/>
			<!-- oracle driver -->
  			<include name="orai18n-*.jar"/>
			<include name="ojdbc-*.jar"/>
			<!-- mysql driver -->
  			<include name="mysql-connector-*.jar"/>
			<!-- hsqldb driver -->
  			<include name="hsqldb-*.jar"/>
			<!-- pentaho cwm -->
  			<include name="pentaho-cwm-*.jar"/>			
			<!-- quartz -->
  			<include name="quartz-*.jar"/>
		    <!-- jpivot -->
		    <include name="jpivot-*.jar"/>

            <!-- Move Jersey to pdi-ee\lib-->
            <include name="jersey-multipart*.jar"/>
            <include name="jersey-apache-client*.jar"/>
            <include name="jersey-client*.jar"/>
            <include name="jersey-servlet*.jar"/>
            <include name="jersey-spring*.jar"/>
            <include name="jersey-server*.jar"/>
            <include name="jersey-core*.jar"/>
            <include name="jersey-json*.jar"/>
            <include name="jersey-bundle*.jar"/>
            
            <!-- ESAPI version conflict with 2.0.1-->
            <include name="ESAPI-2.0_rc6.jar"/>

            <include name="jackson*.jar"/>
			<!-- Webservices -->
			<include name="webservices-api*.jar"/>
			<include name="webservices-rt*.jar"/>
			
			<include name="jsr311-api*.jar"/>
		    <!-- third - remove reporting jars that will already be in kettle -->
			<!--          but not the reporting wizard, that should remain    -->         
		    <include name="lib*.jar"/>
		    <include name="pentaho-reporting-engine-*.jar"/>
		    <exclude name="pentaho-reporting-engine-wizard-xul-*.jar"/>

			<!-- generated by test-src/FindDuplicateJars.java -->
			<include name="activation-*.jar"/>
			<include name="commons-beanutils-*.jar"/>
			<include name="commons-codec-*.jar"/>
			<include name="commons-collections-*.jar"/>
			<include name="commons-dbcp-*.jar"/>
			<include name="commons-digester-*.jar"/>
			<include name="commons-fileupload-*.jar"/>
			<include name="commons-httpclient-*.jar"/>
			<include name="commons-lang-*.jar"/>
			<include name="commons-logging-*.jar"/>
			<include name="commons-net-*.jar"/>
			<include name="commons-pool-*.jar"/>
			<include name="commons-vfs-*.jar"/>
			<include name="dom4j-*.jar"/>
			<include name="feed4j-*.jar"/>
			<include name="georss-rome-*.jar"/>
			<include name="janino-*.jar"/>
			<include name="jaxen-*.jar"/>
			<include name="jcommon-*.jar"/>
			<include name="jfreechart-*.jar"/>
			<include name="js-*.jar"/>
			<include name="jug-lgpl-*.jar"/>
			<include name="junit-*.jar"/>
			<include name="jxl-*.jar"/>
			<include name="log4j-*.jar"/>
			<include name="mail-*.jar"/>
			<include name="nekohtml-*.jar"/>
			<include name="ognl-*.jar"/>
			<include name="pentaho-database-*.jar"/>
			<include name="rome-*.jar"/>
			<include name="salesforce-*.jar"/>
			<include name="simple-jndi-*.jar"/>
			<include name="spring-beans-*.jar"/>
			<include name="spring-context-*.jar"/>
			<include name="spring-context-support-*.jar"/>
			<!-- Moved Spring JARS to libext/spring -->
			<include name="spring-2.5.6.jar"/>
			<include name="wsdl4j-*.jar"/>
			<include name="wstx-asl-*.jar"/>
			<include name="xercesImpl-*.jar"/>
			<include name="jmiutils-*.jar"/>
			<include name="xml-apis-*.jar"/>
			
			<exclude name="pentaho-database-model-*.jar"/>

      		<include name="openide-util-*.jar"/>
			<include name="xmlParserAPIs-*.jar"/>
      		<include name="geronimo-stax-api*.jar"/>
      		<include name="stax-*.jar"/>
			<include name="jtidy*.jar"/>
		</fileset>
  	</delete>
  </target>

  <!--
   ehcache.xml needs to be in the classpath for geo plugin to work properly. Kettle's plugin class loading system
   only server jars so just including it in the distribution's lib folder doesn't work. It needs to be in the jar so it
   will be picked up.
   -->
  <target name="embed-ehcache-xml-in-jar">
    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" update="true">
      <fileset dir="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes">
        <include name="ehcache.xml" />
      </fileset>
    </jar>
    <jar destfile="${approot.stage.dir}/${ivy.artifact.id}-${project.revision}.jar" update="true">
      <fileset dir="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes">
        <include name="ehcache.xml" />
      </fileset>
    </jar>
  </target>

  <target name="package-zip" depends="embed-ehcache-xml-in-jar, subfloor-pkg.package-zip"/>

	<target name="assemble-embedded-server" depends="install-antcontrib">
		<!-- Step 1: Unzip a platform zip into staging dir -->
		<mkdir dir="${platform.unzip.dir}"/>
		<unzip dest="${platform.unzip.dir}">
			<fileset dir="${platform.dist.dir}">
			        <include name="biserver-ce-*.zip"/>
		    </fileset>
		</unzip>
		<!-- Step 2: Move / Remove platform as necessary -->

		<mkdir dir="${approot.stage.dir}/platform/webapps"/>
		<move file="${platform.unzip.dir}/biserver-ce/tomcat/webapps/pentaho" todir="${approot.stage.dir}/platform/webapps"/>
		<move file="${platform.unzip.dir}/biserver-ce/pentaho-solutions" todir="${approot.stage.dir}/platform"/>		
		<!-- copy overwrite="true" todir="${approot.stage.dir}/platform/webapps">
			<fileset dir="${platform.unzip.dir}/biserver-ce/tomcat/webapps/pentaho">
		    </fileset>
		</copy>
		<copy overwrite="true" todir="${approot.stage.dir}/platform">
			<fileset dir="${platform.unzip.dir}/biserver-ce/pentaho-solutions">
		    </fileset>
		</copy -->
		<!-- remove all the platform jar files, these are now part of the kettle classpath
		     and are brought over via ivy -->
		<delete>
			<fileset dir="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/lib">
				<include name="*.jar"/>
			</fileset>
		</delete>
	    
	  <!-- remove all the JPivot files -->
	  <delete dir="${approot.stage.dir}/platform/webapps/pentaho/jpivot" />
		<delete dir="approot.stage.dir}/platform/webapps/pentaho/WEB-INF/jpivot" />
	  <delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/pentaho-jpivot-plugin" />
	  
		<!-- remove solution folders that aren't necessary -->
	  <delete dir="${approot.stage.dir}/platform/pentaho-solutions/plugin-samples" />

		<!--<delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/data-access"/>-->

        <delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/BIRT"/>
		    <delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/reporting"/>
		<delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/pentaho-cdf-dd"/>

		<!-- Remove kettle plugins -->
		<delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/kettle/plugins"/>
		
		<!-- CDF is needed for the new analyzer visualizations -->
        <!--<delete dir="${approot.stage.dir}/platform/pentaho-solutions/system/pentaho-cdf"/>-->

        <delete dir="${approot.stage.dir}/platform/pentaho-solutions/admin"/>
		<delete dir="${approot.stage.dir}/platform/pentaho-solutions/bi-developers"/>
		<delete dir="${approot.stage.dir}/platform/pentaho-solutions/cdf"/>
		<delete dir="${approot.stage.dir}/platform/pentaho-solutions/steel-wheels"/>
	
		<!-- remove webapp code that is not necessary -->
		<delete dir="${approot.stage.dir}/platform/webapps/pentaho/docs"/>
		<delete dir="${approot.stage.dir}/platform/webapps/pentaho/mantle"/>
		<delete dir="${approot.stage.dir}/platform/webapps/pentaho/mantleLogin"/>

		<!-- Add the server-assembly.properties files -->
		
    <mkdir dir="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes"/>
    <echo file="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes/${server.assembly.filename}" append="false">assembly.title=${agbi.server.product.title}&#13;&#10;</echo>
    <echo file="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes/${server.assembly.filename}" append="true">assembly.productid=${agbi.server.product.id}&#13;&#10;</echo>
    <echo file="${approot.stage.dir}/platform/webapps/pentaho/WEB-INF/classes/${server.assembly.filename}" append="true">assembly.version=${project.revision}&#13;&#10;</echo>

		<!-- Step 3: Unzip the analyzer dist if available -->
		<fail message="Pentaho Analyzer agilebi plugin zip file is not available.">
          <condition>
	        <not>
	          <resourcecount count="1">
	            <fileset id="agilebiplugin" dir="${analyzer.dist.dir}" includes="paz-agilebi-plugin-*.zip" />
	          </resourcecount>
	        </not>
	      </condition>
        </fail>

		<if>
	      <available file="${analyzer.dist.dir}" />
	      <then>
			<unzip dest="${approot.stage.dir}/platform/pentaho-solutions/system">
				<fileset dir="${analyzer.dist.dir}">
			        <include name="paz-agilebi-plugin-*.zip"/>
		    	</fileset>
			</unzip>
      	  </then>
	     </if>

        <!-- Step 4: Unzip the geo dist if available -->
        <fail message="Pentaho Geo agilebi plugin zip file is not available.">
            <condition>
                <not>
                    <resourcecount count="1">
                        <fileset id="agilebiplugin" dir="${geo.dist.dir}" includes="geo-agilebi-plugin-*.zip" />
                    </resourcecount>
                </not>
            </condition>
        </fail>

        <if>
            <available file="${geo.dist.dir}" />
            <then>
                <unzip dest="${approot.stage.dir}/platform/pentaho-solutions/system">
                    <fileset dir="${geo.dist.dir}">
                        <include name="geo-agilebi-plugin-*.zip"/>
                    </fileset>
                </unzip>
            </then>
        </if>

	</target>
	
	  <target name="assemble.copy-libs">
	    <copy todir="${approot.stage.dir}/lib">
	      <fileset dir="${lib.dir}" />
	    </copy>
	    <copy todir="${approot.stage.dir}">
	      <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
	    </copy>
	  </target>

	<!-- this target builds a kettle release that includes the agile bi plugin -->
	<target name="kettle-w-plugin-dist">
		<delete dir="${bin.dir}/kettle-dist"/>
		<delete file="${dist.dir}/${pdiwithagilebi}.zip"/>
		<delete file="${dist.dir}/${pdiwithagilebi}.tgz"/>
		<unzip dest="${bin.dir}/kettle-dist">
			<fileset dir="${kettle.dist.dir}">
				<include name="pdi-ce-${dependency.kettle.revision}.zip"/>
			</fileset>
		</unzip>

		<!-- copy in the start-up items 	
	    <copy todir="${bin.dir}/kettle-dist/data-integration">
	      <fileset file="pdi-res/**"/>
	    </copy>-->
	
		<!-- patchup permissions -->		
	      <chmod dir="${bin.dir}/kettle-dist/data-integration" perm="755" excludes="docs/api/** docs/api-core/** **/Thumbs.db" verbose="true">
	        <include name="**/*.sh" />
	      	<include name="**/JavaApplicationStub" />
	      </chmod>
		
		<unzip dest="${bin.dir}/kettle-dist/data-integration/plugins/spoon">
			<fileset dir="${dist.dir}">
				<include name="${package.basename}.zip"/>
			</fileset>
		</unzip>
		<!-- copy in the monetdb Agile Mart plugin -->
<!--
		<unzip dest="${bin.dir}/kettle-dist/data-integration/plugins/steps">
			<fileset dir="${monetdb-plugin-assembly.dir}">
				<include name="MonetDBAgileMartPlugin-*.zip"/>
			</fileset>
		</unzip>
	    <zip destfile="${dist.dir}/${pdiwithagilebi}.zip">
	      <zipfileset dir="${bin.dir}/kettle-dist" filemode="755" excludes="docs/api/** docs/api-core/** **/Thumbs.db">
	        <include name="**/*.sh" />
	      	<include name="**/JavaApplicationStub" />
	      </zipfileset>
	      <zipfileset dir="${bin.dir}/kettle-dist" excludes="docs/api/** docs/api-core/** **/Thumbs.db">
	        <exclude name="**/*.sh" />
	      	<exclude name="**/JavaApplicationStub" />
	      </zipfileset>
	    </zip>
-->
	</target>
	
	<target name="install-plugin">
		<delete dir="${kettle.dist.dir}/plugins/spoon/agile-bi"/>
		<unzip dest="${kettle.dist.dir}/plugins/spoon">
			<fileset file="${dist.dir}/${package.basename}.zip"/>
			</unzip>
	</target>
	
	<target name="publish-nojar" depends="install-antcontrib,create-pom,ivy.deliver">
 	    <antcall target="maven-publish-artifact">
	      <param name="publish.pomFile" value="${ivy.artifact.pomfile}" />
	      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
	    </antcall>
	</target>
	
	  <target name="publish" depends="dist-source, publish-nojar">
	  </target>


</project>
